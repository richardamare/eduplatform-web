/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WIdImport } from './routes/w.$id'
import { Route as WIdIndexImport } from './routes/w.$id.index'
import { Route as WIdCNewImport } from './routes/w.$id.c.new'
import { Route as WIdCChatIdImport } from './routes/w.$id.c.$chatId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WIdRoute = WIdImport.update({
  id: '/w/$id',
  path: '/w/$id',
  getParentRoute: () => rootRoute,
} as any)

const WIdIndexRoute = WIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WIdRoute,
} as any)

const WIdCNewRoute = WIdCNewImport.update({
  id: '/c/new',
  path: '/c/new',
  getParentRoute: () => WIdRoute,
} as any)

const WIdCChatIdRoute = WIdCChatIdImport.update({
  id: '/c/$chatId',
  path: '/c/$chatId',
  getParentRoute: () => WIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/w/$id': {
      id: '/w/$id'
      path: '/w/$id'
      fullPath: '/w/$id'
      preLoaderRoute: typeof WIdImport
      parentRoute: typeof rootRoute
    }
    '/w/$id/': {
      id: '/w/$id/'
      path: '/'
      fullPath: '/w/$id/'
      preLoaderRoute: typeof WIdIndexImport
      parentRoute: typeof WIdImport
    }
    '/w/$id/c/$chatId': {
      id: '/w/$id/c/$chatId'
      path: '/c/$chatId'
      fullPath: '/w/$id/c/$chatId'
      preLoaderRoute: typeof WIdCChatIdImport
      parentRoute: typeof WIdImport
    }
    '/w/$id/c/new': {
      id: '/w/$id/c/new'
      path: '/c/new'
      fullPath: '/w/$id/c/new'
      preLoaderRoute: typeof WIdCNewImport
      parentRoute: typeof WIdImport
    }
  }
}

// Create and export the route tree

interface WIdRouteChildren {
  WIdIndexRoute: typeof WIdIndexRoute
  WIdCChatIdRoute: typeof WIdCChatIdRoute
  WIdCNewRoute: typeof WIdCNewRoute
}

const WIdRouteChildren: WIdRouteChildren = {
  WIdIndexRoute: WIdIndexRoute,
  WIdCChatIdRoute: WIdCChatIdRoute,
  WIdCNewRoute: WIdCNewRoute,
}

const WIdRouteWithChildren = WIdRoute._addFileChildren(WIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/w/$id': typeof WIdRouteWithChildren
  '/w/$id/': typeof WIdIndexRoute
  '/w/$id/c/$chatId': typeof WIdCChatIdRoute
  '/w/$id/c/new': typeof WIdCNewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/w/$id': typeof WIdIndexRoute
  '/w/$id/c/$chatId': typeof WIdCChatIdRoute
  '/w/$id/c/new': typeof WIdCNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/w/$id': typeof WIdRouteWithChildren
  '/w/$id/': typeof WIdIndexRoute
  '/w/$id/c/$chatId': typeof WIdCChatIdRoute
  '/w/$id/c/new': typeof WIdCNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/w/$id' | '/w/$id/' | '/w/$id/c/$chatId' | '/w/$id/c/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/w/$id' | '/w/$id/c/$chatId' | '/w/$id/c/new'
  id:
    | '__root__'
    | '/'
    | '/w/$id'
    | '/w/$id/'
    | '/w/$id/c/$chatId'
    | '/w/$id/c/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WIdRoute: typeof WIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WIdRoute: WIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/w/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/w/$id": {
      "filePath": "w.$id.tsx",
      "children": [
        "/w/$id/",
        "/w/$id/c/$chatId",
        "/w/$id/c/new"
      ]
    },
    "/w/$id/": {
      "filePath": "w.$id.index.tsx",
      "parent": "/w/$id"
    },
    "/w/$id/c/$chatId": {
      "filePath": "w.$id.c.$chatId.tsx",
      "parent": "/w/$id"
    },
    "/w/$id/c/new": {
      "filePath": "w.$id.c.new.tsx",
      "parent": "/w/$id"
    }
  }
}
ROUTE_MANIFEST_END */
